generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model databasechangelog {
  id            String   @db.VarChar(255)
  author        String   @db.VarChar(255)
  filename      String   @db.VarChar(255)
  dateexecuted  DateTime @db.Timestamp(6)
  orderexecuted Int
  exectype      String   @db.VarChar(10)
  md5sum        String?  @db.VarChar(35)
  description   String?  @db.VarChar(255)
  comments      String?  @db.VarChar(255)
  tag           String?  @db.VarChar(255)
  liquibase     String?  @db.VarChar(20)
  contexts      String?  @db.VarChar(255)
  labels        String?  @db.VarChar(255)
  deployment_id String?  @db.VarChar(10)

  @@ignore
}

model databasechangeloglock {
  id          Int       @id
  locked      Boolean
  lockgranted DateTime? @db.Timestamp(6)
  lockedby    String?   @db.VarChar(255)
}

model event {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String
  about           String
  link            String
  by              String
  place           String
  start_date      DateTime
  end_date        DateTime
  created_by      String
  created_at      DateTime          @default(now())
  updated_at      DateTime          @default(now())
  event_attending event_attending[]
}

model event_attending {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  event_id     String   @db.Uuid
  user_name    String
  is_attending Boolean  @default(true)
  created_at   DateTime @default(now())
  updated_at   DateTime @default(now())
  event        event    @relation(fields: [event_id], references: [id])
}

model project {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String
  about      String
  link       String
  by         String
  created_by String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model suggestion {
  id         String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String
  summary    String
  link       String
  type       article_type
  created_by String
  created_at DateTime     @default(now())
  updated_at DateTime     @default(now())
}

enum article_type {
  ARTICLE
  VIDEO
}
